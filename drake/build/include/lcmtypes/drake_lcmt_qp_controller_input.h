/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <stdint.h>
#include <stdlib.h>
#include <lcm/lcm_coretypes.h>
#include <lcm/lcm.h>

#ifndef _drake_lcmt_qp_controller_input_h
#define _drake_lcmt_qp_controller_input_h

#ifdef __cplusplus
extern "C" {
#endif

#include "drake_lcmt_zmp_data.h"
#include "drake_lcmt_support_data.h"
#include "drake_lcmt_body_motion_data.h"
#include "drake_lcmt_body_wrench_data.h"
#include "drake_lcmt_whole_body_data.h"
#include "drake_lcmt_joint_pd_override.h"
typedef struct _drake_lcmt_qp_controller_input drake_lcmt_qp_controller_input;
struct _drake_lcmt_qp_controller_input
{
    int8_t     be_silent;
    int64_t    timestamp;
    drake_lcmt_zmp_data zmp_data;
    int32_t    num_support_data;
    drake_lcmt_support_data *support_data;
    int32_t    num_tracked_bodies;
    drake_lcmt_body_motion_data *body_motion_data;
    int32_t    num_external_wrenches;
    drake_lcmt_body_wrench_data *body_wrench_data;
    drake_lcmt_whole_body_data whole_body_data;
    int32_t    num_joint_pd_overrides;
    drake_lcmt_joint_pd_override *joint_pd_override;
    char*      param_set_name;
};

drake_lcmt_qp_controller_input   *drake_lcmt_qp_controller_input_copy(const drake_lcmt_qp_controller_input *p);
void drake_lcmt_qp_controller_input_destroy(drake_lcmt_qp_controller_input *p);

typedef struct _drake_lcmt_qp_controller_input_subscription_t drake_lcmt_qp_controller_input_subscription_t;
typedef void(*drake_lcmt_qp_controller_input_handler_t)(const lcm_recv_buf_t *rbuf,
             const char *channel, const drake_lcmt_qp_controller_input *msg, void *user);

int drake_lcmt_qp_controller_input_publish(lcm_t *lcm, const char *channel, const drake_lcmt_qp_controller_input *p);
drake_lcmt_qp_controller_input_subscription_t* drake_lcmt_qp_controller_input_subscribe(lcm_t *lcm, const char *channel, drake_lcmt_qp_controller_input_handler_t f, void *userdata);
int drake_lcmt_qp_controller_input_unsubscribe(lcm_t *lcm, drake_lcmt_qp_controller_input_subscription_t* hid);
int drake_lcmt_qp_controller_input_subscription_set_queue_capacity(drake_lcmt_qp_controller_input_subscription_t* subs,
                              int num_messages);


int  drake_lcmt_qp_controller_input_encode(void *buf, int offset, int maxlen, const drake_lcmt_qp_controller_input *p);
int  drake_lcmt_qp_controller_input_decode(const void *buf, int offset, int maxlen, drake_lcmt_qp_controller_input *p);
int  drake_lcmt_qp_controller_input_decode_cleanup(drake_lcmt_qp_controller_input *p);
int  drake_lcmt_qp_controller_input_encoded_size(const drake_lcmt_qp_controller_input *p);

// LCM support functions. Users should not call these
int64_t __drake_lcmt_qp_controller_input_get_hash(void);
int64_t __drake_lcmt_qp_controller_input_hash_recursive(const __lcm_hash_ptr *p);
int     __drake_lcmt_qp_controller_input_encode_array(void *buf, int offset, int maxlen, const drake_lcmt_qp_controller_input *p, int elements);
int     __drake_lcmt_qp_controller_input_decode_array(const void *buf, int offset, int maxlen, drake_lcmt_qp_controller_input *p, int elements);
int     __drake_lcmt_qp_controller_input_decode_array_cleanup(drake_lcmt_qp_controller_input *p, int elements);
int     __drake_lcmt_qp_controller_input_encoded_array_size(const drake_lcmt_qp_controller_input *p, int elements);
int     __drake_lcmt_qp_controller_input_clone_array(const drake_lcmt_qp_controller_input *p, drake_lcmt_qp_controller_input *q, int elements);

#ifdef __cplusplus
}
#endif

#endif

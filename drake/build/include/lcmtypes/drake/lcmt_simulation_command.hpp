/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __drake_lcmt_simulation_command_hpp__
#define __drake_lcmt_simulation_command_hpp__

#include <string>
#include <vector>

namespace drake
{

class lcmt_simulation_command
{
    public:
        int64_t    timestamp;
        int8_t     command_type;
        std::string string_data;
        int32_t    num_float_data;
        std::vector< float > float_data;

    public:
        static const int8_t   RUN = 0;
        static const int8_t   PAUSE = 1;
        static const int8_t   STOP = 2;
        static const int8_t   RESTART = 3;
        static const int8_t   SHUTDOWN = 4;

    public:
        inline int encode(void *buf, int offset, int maxlen) const;
        inline int getEncodedSize() const;
        inline int decode(const void *buf, int offset, int maxlen);
        inline static int64_t getHash();
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static int64_t _computeHash(const __lcm_hash_ptr *p);
};

int lcmt_simulation_command::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int lcmt_simulation_command::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int lcmt_simulation_command::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t lcmt_simulation_command::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* lcmt_simulation_command::getTypeName()
{
    return "lcmt_simulation_command";
}

int lcmt_simulation_command::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->command_type, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* string_data_cstr = (char*) this->string_data.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &string_data_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_float_data, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->float_data[0], this->num_float_data);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int lcmt_simulation_command::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->command_type, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t __string_data_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__string_data_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__string_data_len__ > maxlen - pos) return -1;
    this->string_data.assign(((const char*)buf) + offset + pos, __string_data_len__ - 1);
    pos += __string_data_len__;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_float_data, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->float_data.resize(this->num_float_data);
    if(this->num_float_data) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->float_data[0], this->num_float_data);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int lcmt_simulation_command::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += this->string_data.size() + 4 + 1;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, this->num_float_data);
    return enc_size;
}

int64_t lcmt_simulation_command::_computeHash(const __lcm_hash_ptr *)
{
    int64_t hash = 0xc8564b028f6c8abeLL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif

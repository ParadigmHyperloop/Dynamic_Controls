/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __drake_lcmt_qp_controller_input_hpp__
#define __drake_lcmt_qp_controller_input_hpp__

#include <vector>
#include <string>
#include "lcmtypes\drake\lcmt_zmp_data.hpp"
#include "lcmtypes\drake\lcmt_support_data.hpp"
#include "lcmtypes\drake\lcmt_body_motion_data.hpp"
#include "lcmtypes\drake\lcmt_body_wrench_data.hpp"
#include "lcmtypes\drake\lcmt_whole_body_data.hpp"
#include "lcmtypes\drake\lcmt_joint_pd_override.hpp"

namespace drake
{

class lcmt_qp_controller_input
{
    public:
        int8_t     be_silent;
        int64_t    timestamp;
        drake::lcmt_zmp_data zmp_data;
        int32_t    num_support_data;
        std::vector< drake::lcmt_support_data > support_data;
        int32_t    num_tracked_bodies;
        std::vector< drake::lcmt_body_motion_data > body_motion_data;
        int32_t    num_external_wrenches;
        std::vector< drake::lcmt_body_wrench_data > body_wrench_data;
        drake::lcmt_whole_body_data whole_body_data;
        int32_t    num_joint_pd_overrides;
        std::vector< drake::lcmt_joint_pd_override > joint_pd_override;
        std::string param_set_name;

    public:
        inline int encode(void *buf, int offset, int maxlen) const;
        inline int getEncodedSize() const;
        inline int decode(const void *buf, int offset, int maxlen);
        inline static int64_t getHash();
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static int64_t _computeHash(const __lcm_hash_ptr *p);
};

int lcmt_qp_controller_input::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int lcmt_qp_controller_input::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int lcmt_qp_controller_input::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t lcmt_qp_controller_input::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* lcmt_qp_controller_input::getTypeName()
{
    return "lcmt_qp_controller_input";
}

int lcmt_qp_controller_input::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->be_silent, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->zmp_data._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_support_data, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_support_data; a0++) {
        tlen = this->support_data[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_tracked_bodies, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_tracked_bodies; a0++) {
        tlen = this->body_motion_data[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_external_wrenches, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_external_wrenches; a0++) {
        tlen = this->body_wrench_data[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = this->whole_body_data._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_joint_pd_overrides, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_joint_pd_overrides; a0++) {
        tlen = this->joint_pd_override[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    char* param_set_name_cstr = (char*) this->param_set_name.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &param_set_name_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int lcmt_qp_controller_input::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->be_silent, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->zmp_data._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_support_data, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->support_data.resize(this->num_support_data);
    for (int a0 = 0; a0 < this->num_support_data; a0++) {
        tlen = this->support_data[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_tracked_bodies, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->body_motion_data.resize(this->num_tracked_bodies);
    for (int a0 = 0; a0 < this->num_tracked_bodies; a0++) {
        tlen = this->body_motion_data[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_external_wrenches, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->body_wrench_data.resize(this->num_external_wrenches);
    for (int a0 = 0; a0 < this->num_external_wrenches; a0++) {
        tlen = this->body_wrench_data[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = this->whole_body_data._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_joint_pd_overrides, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->joint_pd_override.resize(this->num_joint_pd_overrides);
    for (int a0 = 0; a0 < this->num_joint_pd_overrides; a0++) {
        tlen = this->joint_pd_override[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    int32_t __param_set_name_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__param_set_name_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__param_set_name_len__ > maxlen - pos) return -1;
    this->param_set_name.assign(((const char*)buf) + offset + pos, __param_set_name_len__ - 1);
    pos += __param_set_name_len__;

    return pos;
}

int lcmt_qp_controller_input::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += this->zmp_data._getEncodedSizeNoHash();
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_support_data; a0++) {
        enc_size += this->support_data[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_tracked_bodies; a0++) {
        enc_size += this->body_motion_data[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_external_wrenches; a0++) {
        enc_size += this->body_wrench_data[a0]._getEncodedSizeNoHash();
    }
    enc_size += this->whole_body_data._getEncodedSizeNoHash();
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_joint_pd_overrides; a0++) {
        enc_size += this->joint_pd_override[a0]._getEncodedSizeNoHash();
    }
    enc_size += this->param_set_name.size() + 4 + 1;
    return enc_size;
}

int64_t lcmt_qp_controller_input::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == lcmt_qp_controller_input::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, (void*)lcmt_qp_controller_input::getHash };

    int64_t hash = 0x10daf84344767104LL +
         drake::lcmt_zmp_data::_computeHash(&cp) +
         drake::lcmt_support_data::_computeHash(&cp) +
         drake::lcmt_body_motion_data::_computeHash(&cp) +
         drake::lcmt_body_wrench_data::_computeHash(&cp) +
         drake::lcmt_whole_body_data::_computeHash(&cp) +
         drake::lcmt_joint_pd_override::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif

/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __drake_lcmt_polynomial_matrix_hpp__
#define __drake_lcmt_polynomial_matrix_hpp__

#include <vector>
#include "lcmtypes\drake\lcmt_polynomial.hpp"

namespace drake
{

class lcmt_polynomial_matrix
{
    public:
        int64_t    timestamp;
        int32_t    rows;
        int32_t    cols;
        std::vector< std::vector< drake::lcmt_polynomial > > polynomials;

    public:
        inline int encode(void *buf, int offset, int maxlen) const;
        inline int getEncodedSize() const;
        inline int decode(const void *buf, int offset, int maxlen);
        inline static int64_t getHash();
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static int64_t _computeHash(const __lcm_hash_ptr *p);
};

int lcmt_polynomial_matrix::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int lcmt_polynomial_matrix::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int lcmt_polynomial_matrix::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t lcmt_polynomial_matrix::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* lcmt_polynomial_matrix::getTypeName()
{
    return "lcmt_polynomial_matrix";
}

int lcmt_polynomial_matrix::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->rows, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->cols, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->rows; a0++) {
        for (int a1 = 0; a1 < this->cols; a1++) {
            tlen = this->polynomials[a0][a1]._encodeNoHash(buf, offset + pos, maxlen - pos);
            if(tlen < 0) return tlen; else pos += tlen;
        }
    }

    return pos;
}

int lcmt_polynomial_matrix::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->rows, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->cols, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->polynomials.resize(this->rows);
    for (int a0 = 0; a0 < this->rows; a0++) {
        this->polynomials[a0].resize(this->cols);
        for (int a1 = 0; a1 < this->cols; a1++) {
            tlen = this->polynomials[a0][a1]._decodeNoHash(buf, offset + pos, maxlen - pos);
            if(tlen < 0) return tlen; else pos += tlen;
        }
    }

    return pos;
}

int lcmt_polynomial_matrix::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->rows; a0++) {
        for (int a1 = 0; a1 < this->cols; a1++) {
            enc_size += this->polynomials[a0][a1]._getEncodedSizeNoHash();
        }
    }
    return enc_size;
}

int64_t lcmt_polynomial_matrix::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == lcmt_polynomial_matrix::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, (void*)lcmt_polynomial_matrix::getHash };

    int64_t hash = 0xb7c3cad59f376c2dLL +
         drake::lcmt_polynomial::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

}

#endif

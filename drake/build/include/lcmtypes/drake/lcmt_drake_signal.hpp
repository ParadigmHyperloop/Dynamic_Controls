/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __drake_lcmt_drake_signal_hpp__
#define __drake_lcmt_drake_signal_hpp__

#include <vector>
#include <string>

namespace drake
{

class lcmt_drake_signal
{
    public:
        int32_t    dim;
        std::vector< double > val;
        std::vector< std::string > coord;
        int64_t    timestamp;

    public:
        inline int encode(void *buf, int offset, int maxlen) const;
        inline int getEncodedSize() const;
        inline int decode(const void *buf, int offset, int maxlen);
        inline static int64_t getHash();
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static int64_t _computeHash(const __lcm_hash_ptr *p);
};

int lcmt_drake_signal::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int lcmt_drake_signal::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int lcmt_drake_signal::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t lcmt_drake_signal::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* lcmt_drake_signal::getTypeName()
{
    return "lcmt_drake_signal";
}

int lcmt_drake_signal::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->dim, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->val[0], this->dim);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->dim; a0++) {
        char* __cstr = (char*) this->coord[a0].c_str();
        tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &__cstr, 1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int lcmt_drake_signal::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->dim, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->val.resize(this->dim);
    if(this->dim) {
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->val[0], this->dim);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    this->coord.resize(this->dim);
    for (int a0 = 0; a0 < this->dim; a0++) {
        int32_t __elem_len;
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__elem_len, 1);
        if(tlen < 0) return tlen; else pos += tlen;
        if(__elem_len > maxlen - pos) return -1;
        this->coord[a0].assign(((const char*)buf) + offset + pos, __elem_len -  1);
        pos += __elem_len;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->timestamp, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int lcmt_drake_signal::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, this->dim);
    for (int a0 = 0; a0 < this->dim; a0++) {
        enc_size += this->coord[a0].size() + 4 + 1;
    }
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    return enc_size;
}

int64_t lcmt_drake_signal::_computeHash(const __lcm_hash_ptr *)
{
    int64_t hash = 0x236e73ecd6fc3932LL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif

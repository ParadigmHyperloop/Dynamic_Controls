/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <stdint.h>
#include <stdlib.h>
#include <lcm/lcm_coretypes.h>
#include <lcm/lcm.h>

#ifndef _drake_lcmt_viewer_command_h
#define _drake_lcmt_viewer_command_h

#ifdef __cplusplus
extern "C" {
#endif

#define DRAKE_LCMT_VIEWER_COMMAND_STATUS 0
#define DRAKE_LCMT_VIEWER_COMMAND_LOAD_MODEL 1
#define DRAKE_LCMT_VIEWER_COMMAND_LOAD_RENDERER 2
#define DRAKE_LCMT_VIEWER_COMMAND_SHUTDOWN 3
#define DRAKE_LCMT_VIEWER_COMMAND_START_RECORDING 4
#define DRAKE_LCMT_VIEWER_COMMAND_STOP_RECORDING 5
#define DRAKE_LCMT_VIEWER_COMMAND_LOAD_TERRAIN 6
#define DRAKE_LCMT_VIEWER_COMMAND_SET_TERRAIN_TRANSFORM 7

typedef struct _drake_lcmt_viewer_command drake_lcmt_viewer_command;
struct _drake_lcmt_viewer_command
{
    int8_t     command_type;
    char*      command_data;
};

drake_lcmt_viewer_command   *drake_lcmt_viewer_command_copy(const drake_lcmt_viewer_command *p);
void drake_lcmt_viewer_command_destroy(drake_lcmt_viewer_command *p);

typedef struct _drake_lcmt_viewer_command_subscription_t drake_lcmt_viewer_command_subscription_t;
typedef void(*drake_lcmt_viewer_command_handler_t)(const lcm_recv_buf_t *rbuf,
             const char *channel, const drake_lcmt_viewer_command *msg, void *user);

int drake_lcmt_viewer_command_publish(lcm_t *lcm, const char *channel, const drake_lcmt_viewer_command *p);
drake_lcmt_viewer_command_subscription_t* drake_lcmt_viewer_command_subscribe(lcm_t *lcm, const char *channel, drake_lcmt_viewer_command_handler_t f, void *userdata);
int drake_lcmt_viewer_command_unsubscribe(lcm_t *lcm, drake_lcmt_viewer_command_subscription_t* hid);
int drake_lcmt_viewer_command_subscription_set_queue_capacity(drake_lcmt_viewer_command_subscription_t* subs,
                              int num_messages);


int  drake_lcmt_viewer_command_encode(void *buf, int offset, int maxlen, const drake_lcmt_viewer_command *p);
int  drake_lcmt_viewer_command_decode(const void *buf, int offset, int maxlen, drake_lcmt_viewer_command *p);
int  drake_lcmt_viewer_command_decode_cleanup(drake_lcmt_viewer_command *p);
int  drake_lcmt_viewer_command_encoded_size(const drake_lcmt_viewer_command *p);

// LCM support functions. Users should not call these
int64_t __drake_lcmt_viewer_command_get_hash(void);
int64_t __drake_lcmt_viewer_command_hash_recursive(const __lcm_hash_ptr *p);
int     __drake_lcmt_viewer_command_encode_array(void *buf, int offset, int maxlen, const drake_lcmt_viewer_command *p, int elements);
int     __drake_lcmt_viewer_command_decode_array(const void *buf, int offset, int maxlen, drake_lcmt_viewer_command *p, int elements);
int     __drake_lcmt_viewer_command_decode_array_cleanup(drake_lcmt_viewer_command *p, int elements);
int     __drake_lcmt_viewer_command_encoded_array_size(const drake_lcmt_viewer_command *p, int elements);
int     __drake_lcmt_viewer_command_clone_array(const drake_lcmt_viewer_command *p, drake_lcmt_viewer_command *q, int elements);

#ifdef __cplusplus
}
#endif

#endif
